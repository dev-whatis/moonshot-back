"""
(parsing_service.py) Utility functions for parsing and extracting data
from text content, such as LLM-generated Markdown.
"""

import re
from typing import List

# --- MODIFICATION START: The function is renamed and its logic is completely rewritten ---

def extract_product_names(markdown_text: str) -> List[str]:
    """
    Extracts product names from a Markdown string by specifically looking for the
    '### RECOMMENDATIONS' section and parsing the bulleted list within it.

    This method is tailored to the new, standardized machine-readable format
    at the end of the LLM's output.

    Args:
        markdown_text (str): The Markdown content generated by the LLM.

    Returns:
        List[str]: A single, unified list of product names extracted from the
                   'RECOMMENDATIONS' section.
    """
    product_names = []

    # Regex to find the '### RECOMMENDATIONS' section and capture all content
    # that follows it until the end of the string.
    # - `###\s+RECOMMENDATIONS`: Matches the specific header.
    # - `\n`: Matches the newline after the header.
    # - `(.*)`: Captures everything after the header to the end of the string.
    # `re.DOTALL` ensures that `.` matches newline characters.
    # `re.IGNORECASE` makes the 'RECOMMENDATIONS' match case-insensitive.
    section_pattern = r"###\s+RECOMMENDATIONS\n(.*)"
    match = re.search(section_pattern, markdown_text, re.DOTALL | re.IGNORECASE)

    if match:
        # If the section is found, we take the content of that section
        recommendations_block = match.group(1)

        # Regex to find all lines starting with a bullet point '- '
        # and capture the text that follows.
        # - `^\s*-\s+`: Matches the start of a line (optional spaces), a hyphen,
        #   and one or more spaces.
        # - `(.*)`: Captures the rest of the line, which is the product name.
        # `re.MULTILINE` is crucial for `^` to match the start of each line.
        product_pattern = r"^\s*-\s+(.*)"
        product_names = re.findall(product_pattern, recommendations_block, re.MULTILINE)

    # Clean up any leading/trailing whitespace from the captured names
    return [name.strip() for name in product_names]

# --- MODIFICATION END ---