"""
(parsing_service.py) Utility functions for parsing and extracting data
from text content, such as LLM-generated Markdown.
"""

import re
from typing import List, Dict

def extract_product_names_by_category(markdown_text: str) -> Dict[str, List[str]]:
    """
    Extracts product names from a Markdown string by using a regular expression
    to find major sections ('## Section Title') and their content. It then
    parses Level 3 headers ('### Product Name') within the relevant sections.

    This method is more robust than string splitting and is resilient to minor
    formatting inconsistencies from the LLM (e.g., extra newlines or spaces).

    Args:
        markdown_text (str): The Markdown content generated by the LLM.

    Returns:
        Dict[str, List[str]]: A dictionary containing two lists:
                               - 'productNames': products from top recommendations.
                               - 'strategicAlternatives': products from alternatives.
    """
    # Initialize lists to hold the extracted names
    top_recommendations = []
    strategic_alternatives = []

    # --- MODIFICATION START: More robust section and product parsing ---

    # Regex to find a product name, allowing for flexible spacing after '###'.
    # It captures the text on the rest of the line.
    product_pattern = r"###\s+(.*)"

    # Regex to find a major section. It captures the section title (Group 1)
    # and all of the content that follows (Group 2) until it hits the next
    # major section heading or the end of the string.
    # - `##\s+`: Matches the heading start with one or more spaces.
    # - `(.*?)`: Group 1, non-greedily captures the section title.
    # - `\n`: Matches the newline after the title.
    # - `(.*?)`: Group 2, non-greedily captures all content in the section.
    # - `(?=\n##\s+|$)`: A positive lookahead that stops the match when it sees
    #   the next section heading OR the end of the string, without consuming it.
    section_pattern = r"##\s+(.*?)\n(.*?)(?=\n##\s+|$)"

    # Use re.DOTALL so that '.' in Group 2 matches newline characters.
    all_sections = re.findall(section_pattern, markdown_text, re.DOTALL)
    
    for section_title, section_content in all_sections:
        # We check the stripped title to be safe.
        title = section_title.strip()
        
        if title == "Top Recommendations":
            top_recommendations = re.findall(product_pattern, section_content)
        
        elif title == "Strategic Alternatives":
            strategic_alternatives = re.findall(product_pattern, section_content)

    # --- MODIFICATION END ---

    return {
        "productNames": [name.strip() for name in top_recommendations],
        "strategicAlternatives": [name.strip() for name in strategic_alternatives]
    }